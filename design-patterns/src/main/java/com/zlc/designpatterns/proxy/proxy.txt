一、静态代理 com.zlc.designpatterns.proxy.staticProxy
    优点:
        在不修改目标对象的前提下, 对目标功能进行扩展
    缺点:
        因为代理对象需要与目标对象实现一样的接口,所以会有很多代理类,类太多. 同时,一旦接口增加方法,目标对象与代理对象都要维护.

二、动态代理 com.zlc.designpatterns.proxy.jdkProxy
    1、目标对象实现接口, 代理对象不需要实现接口
    2、代理对象的生成, 是利用jdk的API, 动态的在内存中构建代理对象(需要我们指定创建代理对象/目标对象实现的接口的类型)
    3、动态代理也叫做:JDK代理,接口代理

    代理类所在包:
        java.lang.reflect.Proxy
        执行Proxy.newProxyInstance获取代理对象
            public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h)

三、Cglib代理(子类代理) com.zlc.designpatterns.proxy.CglibProxy
    1、目标对象无需实现接口
    2、代理工厂对象实现MethodInterceptor接口
    Cglib代理,也叫作子类代理,它是在内存中构建一个子类对象从而实现对目标对象功能的扩展.
        JDK的动态代理有一个限制,就是使用动态代理的对象必须实现一个或多个接口,如果想代理没有实现接口的类,就可以使用Cglib实现.
        Cglib是一个强大的高性能的代码生成包,它可以在运行期扩展java类与实现java接口.它广泛的被许多AOP的框架使用,例如Spring AOP和synaop,为他们提供方法的interception(拦截)
        Cglib包的底层是通过使用一个小而块的字节码处理框架ASM来转换字节码并生成新的类.不鼓励直接使用ASM,因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉.
    Cglib子类代理实现方法:
        1.需要引入cglib的jar文件,但是Spring的核心包中已经包括了Cglib功能,所以直接引入pring-core-3.2.5.jar即可.
        2.引入功能包后,就可以在内存中动态构建子类
        3.代理的类不能为final,否则报错 java.lang.IllegalArgumentException: Cannot subclass final class com.zlc.designpatterns.proxy.CglibProxy.UserDao
        4.目标对象的方法如果为final/static,那么就不会被拦截,即不会执行目标对象额外的业务方法.

四、在Spring的AOP编程中:
    如果加入容器的目标对象有实现接口, 使用JDK代理
    如果目标对象没有实现接口, 使用Cglib(子类代理)代理